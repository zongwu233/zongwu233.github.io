<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title></title>
        <link>https%3A//blog.zongwu233.com</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https%3A//blog.zongwu233.com/categories/blog/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 09 Dec 2020 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>至今我们仍未得知那些平行宇宙里的小白鼠们是否懂得信息论</title>
                <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
                <link>https%3A//blog.zongwu233.com/so-far-we-still-dont-know-if-the-mice-in-the-parallel-universe-understand-information-theory/</link>
                <guid>https%3A//blog.zongwu233.com/so-far-we-still-dont-know-if-the-mice-in-the-parallel-universe-understand-information-theory/</guid>
                <description>&lt;!-- Math rendering --&gt;
&lt;script src=&#x27;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.5&#x2F;latest.js?config=TeX-MML-AM_CHTML&#x27; async&gt;&lt;&#x2F;script&gt;
&lt;script type=&quot;text&#x2F;x-mathjax-config&quot;&gt;
MathJax.Hub.Config({tex2jax: {inlineMath: [[&#x27;$&#x27;,&#x27;$&#x27;], [&#x27;\\(&#x27;,&#x27;\\)&#x27;]]}});
&lt;&#x2F;script&gt;
&lt;h2 id=&quot;wen-ti&quot;&gt;问题&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;假设现在有1000瓶药水，其中一瓶是毒药，服用后一小时发作身亡。毒药可以无限稀释，那么给定一小时你需要至少几只小白鼠来找到毒药？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;一直以来，小白鼠们为生物医学科研和制药行业贡献太多。&lt;&#x2F;p&gt;
&lt;p&gt;来自电子虚拟空间的兔子们表示不服，在魔兽世界里，你触发的每一个任务，执行的每一个无指向性的法术，背后都会有一只无辜的兔子牺牲。[1][] &lt;&#x2F;p&gt;
&lt;p&gt;收一收，回到问题上。让我们暂时把这个问题想象成思想实验。现实没有杀戮和死亡，只有 &lt;strong&gt;Love and Peace&lt;&#x2F;strong&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;题目隐含了一个条件，可以把药水任意混合，不影响测试效果。&lt;&#x2F;p&gt;
&lt;p&gt;倘若我们招聘了1000只小白鼠，每一只小白鼠服下不同的药水，一小时之后倒霉蛋就出现了，解决。&lt;&#x2F;p&gt;
&lt;p&gt;公司效益不好，我们对小白鼠裁员一半，只剩500只，工作量还是那么多，那么每一只小白鼠喝两瓶混合物？比如第一只小白鼠喝1，2；第二只喝3，4；最后一只喝999，1000。结果45号小白鼠挂掉，但是现在我们不知道到底是第22瓶还是第23瓶是毒药。那就需要原来的500只中的250只喝3瓶混合物。比如第一只喝1，2，999；第二只喝3，4，997；依次第二百五十只喝249，250，1，从第二百五十一只照旧喝两瓶。也搞定，但是不公平，为什么有的小白鼠只需要喝两瓶混合物而有的喝三瓶？感觉规则设定得太随意。&lt;&#x2F;p&gt;
&lt;p&gt;小白鼠太多，鼠浮于事，太少，拿不到结果。&lt;&#x2F;p&gt;
&lt;p&gt;~~如何尽可能地压榨每一只小白鼠喝下M瓶药水，然后还能计算出具体是哪一瓶~~。世界爱护小动物协会警告。&lt;&#x2F;p&gt;
&lt;p&gt;（啊不对，重新描述）我们至少需要多少只小白鼠冒着生命危险做实验，来告诉我们哪一瓶是毒药。&lt;&#x2F;p&gt;
&lt;p&gt;思考一下：&lt;&#x2F;p&gt;
&lt;p&gt;1000瓶药水，整齐摆在那里，我们无法仅靠肉眼观察找到那一瓶毒药，这1000瓶药水，对我们来说就是个黑箱系统。毒药可能是第一瓶，也可能是第1000瓶。&lt;&#x2F;p&gt;
&lt;p&gt;面对黑箱系统，如何达成目标？我们有~~廉价的~~伟大的小白鼠。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;通过小白鼠与黑箱系统的交互，以及可观察的结果，我们有机会了解这个黑箱系统的某些特性。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;每一只小白鼠喝下混合物，只有两种结果，生或者死。就好像一个信号灯，明或者灭。（你以为犹豫才会败北？不，生命无常，从你作为小白鼠的那一刻，就要有必死的觉悟）&lt;&#x2F;p&gt;
&lt;p&gt;一群小白鼠，依照某种规则喝下若干混合物，生生灭灭。然后我们依据所有信号灯的明灭，推断哪一瓶是毒药。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-ti&quot;&gt;解题&lt;&#x2F;h2&gt;
&lt;p&gt;怎么制定这个精巧的规则呢？目前我们还不知道。&lt;&#x2F;p&gt;
&lt;p&gt;让我们尝试把这个问题转化一下，从复杂困难转化成简单容易。我们不懂1000瓶的情况如何处理，但是我们可以从最简单的来。&lt;&#x2F;p&gt;
&lt;p&gt;转化是我们最强大的武器之一。&lt;&#x2F;p&gt;
&lt;p&gt;把药水数量定义为M。先从$M = 2$开始思考&lt;&#x2F;p&gt;
&lt;p&gt;如果有2瓶药水，我们只需要一只小白鼠就知道哪一瓶是毒药。&lt;&#x2F;p&gt;
&lt;p&gt;如果有3瓶药水，我们需要两只小白鼠。让我们给药水编号，从0开始（这会有一点点好处，后面你会看到）：0，1，2。给小白鼠编号1，2，3。&lt;&#x2F;p&gt;
&lt;p&gt;编号0瓶放着，小白鼠1号喝编号1，小白鼠2号喝编号2。结果也很直观。&lt;&#x2F;p&gt;
&lt;p&gt;如果有4瓶药水，我们还是只需要2只。编号0瓶放着，小白鼠1号喝编号1，小白鼠2号喝编号2。编号3的药水怎么办？小白鼠1号、小白鼠2号都喝！最终方案是：小白鼠1号喝编号1、编号3，小白鼠2号喝编号2、编号3。&lt;&#x2F;p&gt;
&lt;p&gt;就会有很多结果：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;仅小白鼠1号死了 --&amp;gt; 编号1是毒药&lt;&#x2F;li&gt;
&lt;li&gt;仅小白鼠2号死了--&amp;gt; 编号2是毒药&lt;&#x2F;li&gt;
&lt;li&gt;小白鼠1号和2号都死了--&amp;gt; 编号3是毒药&lt;&#x2F;li&gt;
&lt;li&gt;小白鼠都没死！--&amp;gt; 编号0是毒药&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;这么叙述太繁琐了，我们用符号简化我们的表述。对于一只小白鼠，用 0表示中毒死了，1表示活着。有两只小白鼠，于是刚才的结果可以描述成：${ 01,10,00,11 }$ 。只要结果取这里的任何一种情况，我们就知道毒药是哪一瓶。&lt;&#x2F;p&gt;
&lt;p&gt;如果有5瓶药水呢？需要3只。所有的可能结果：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;仅小白鼠1号死了 --&amp;gt; 编号1是毒药&lt;&#x2F;li&gt;
&lt;li&gt;仅小白鼠2号死了--&amp;gt; 编号2是毒药&lt;&#x2F;li&gt;
&lt;li&gt;小白鼠1号和2号都死了--&amp;gt; 编号3是毒药&lt;&#x2F;li&gt;
&lt;li&gt;小白鼠3号死了 ---&amp;gt; 编号4是毒药&lt;&#x2F;li&gt;
&lt;li&gt;小白鼠都没死！--&amp;gt; 编号0是毒药&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;符号表示：${ 011,010,110,001,111 }$。&lt;&#x2F;p&gt;
&lt;p&gt;从这里我们看出了一点端倪，N只小白鼠，可取值0和1，每一只小白鼠的取值相互独立（you jump I jump？没有的事）。如果可能性集合不小于药水的个数，就能解决问题。&lt;&#x2F;p&gt;
&lt;p&gt;我们的问题可以形式化描述了，给出可计算的方程！&lt;&#x2F;p&gt;
&lt;p&gt;$2^N &amp;gt;= 1000$  ，N为正整数，取结果集的最小值。&lt;&#x2F;p&gt;
&lt;p&gt;N = 10&lt;&#x2F;p&gt;
&lt;p&gt;回看刚才我们从最简单的2，3，4，5瓶水的探索，N的取值分别就是1，2，2，3。&lt;&#x2F;p&gt;
&lt;p&gt;我们通过把问题从1000转化成了 2，3，4，5 找到了一个可能的答案，现在需要直面复杂问题了：$M=1000$。&lt;&#x2F;p&gt;
&lt;p&gt;为了更清晰的验证，让我们重新整理一下刚才的符号表示法。&lt;&#x2F;p&gt;
&lt;p&gt;1000 瓶药水还是从0开始编号，0，1，2，3，4 ... ，1000&lt;&#x2F;p&gt;
&lt;p&gt;10 只小白鼠从右向左排列 10，9，... ，4，3，2，1&lt;&#x2F;p&gt;
&lt;p&gt;深吸一口气，让我们开始真正的艰难之旅。看看所有可能的可能性以及对应的结果：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;编号1是毒药，仅小白鼠1号死了 --&amp;gt; 编码表示为：0000000001（10只小白鼠排排站，最右那只挂了）&lt;&#x2F;li&gt;
&lt;li&gt;编号2是毒药，仅小白鼠2号死了--&amp;gt; 编码表示为：0000000010 （从右起第2号挂了）&lt;&#x2F;li&gt;
&lt;li&gt;编号3是毒药，小白鼠1号和2号都死了--&amp;gt; 编码表示为：0000000011 （从右起1号2号挂了）&lt;&#x2F;li&gt;
&lt;li&gt;编号4是毒药，小白鼠3号死了 ---&amp;gt; 编码表示为：0000000100 （从右起3号挂了）&lt;&#x2F;li&gt;
&lt;li&gt;编号5是毒药，小白鼠1号和3号死了--&amp;gt; 编码表示为：0000000101 （从右起1号3号挂了）&lt;&#x2F;li&gt;
&lt;li&gt;编号6是毒药，小白鼠1号和4号死了--&amp;gt; 编码表示为：0000000110 （从右起2号3号挂了）&lt;&#x2F;li&gt;
&lt;li&gt;编号7是毒药，小白鼠1号、2号、3号死了--&amp;gt; 编码表示为：0000000111（从右起1号2号3号挂了）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;...&lt;&#x2F;p&gt;
&lt;ol start=&quot;256&quot;&gt;
&lt;li&gt;编号256是毒药，小白鼠9号死了--&amp;gt; 编码表示为：0100000000 （从右起9号挂了）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;...&lt;&#x2F;p&gt;
&lt;ol start=&quot;456&quot;&gt;
&lt;li&gt;编号456是毒药，小白鼠4号、7号、8号、9号死了--&amp;gt; 编码表示为：0111001000 （从右起4号7号8号9号挂了）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;...&lt;&#x2F;p&gt;
&lt;ol start=&quot;998&quot;&gt;
&lt;li&gt;
&lt;p&gt;编号998是毒药，小白鼠2号、3号、6号、7号、8号、9号、10号死了--&amp;gt; 编码表示为：1111100110 （从右起2号3号6号7号8号9号10号挂了）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;编号999是毒药，小白鼠1号、2号、3号、6号、7号、8号、9号、10号死了--&amp;gt; 编码表示为：1111100111 （从右起1号2号3号6号7号8号9号10号挂了）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;编号0是毒药，所有的小白鼠都没死--&amp;gt; 编码表示为：0000000000&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;1000种可能性，我们都可以通过不同的小白鼠的状态表示出来。而且是一一对应。&lt;&#x2F;p&gt;
&lt;p&gt;根据上面所有情况的列举，我们也知道了这10只小白鼠每一只都要喝哪些药水的混合物。&lt;&#x2F;p&gt;
&lt;p&gt;对所有的药水，如果刚才的编码从右边起第1位是1，比如0000000001，0000000011，00000000101等等，混合起来给1号小白鼠喝。&lt;&#x2F;p&gt;
&lt;p&gt;对所有的药水，如果刚才的编码从右边起第2位是1，比如0000000010，0000000011，0000000110 等等，混合起来给2号小白鼠喝。&lt;&#x2F;p&gt;
&lt;p&gt;...&lt;&#x2F;p&gt;
&lt;p&gt;对所有的药水，如果刚才的编码从右边起第10位是1，比如10000000000，1000000001，1000000010等，混合起来给10号小白鼠喝。&lt;&#x2F;p&gt;
&lt;p&gt;总结一下，可能性的结果的编码集是：&lt;&#x2F;p&gt;
&lt;p&gt;${ 0000000001，0000000010， 0000000011， ... ，1111111110，1111111111， 0000000000 }$&lt;&#x2F;p&gt;
&lt;p&gt;如果1前面全是0，省略掉的写法：&lt;&#x2F;p&gt;
&lt;p&gt;${1,10,11,100,101,110 ，... ， 1111111110，1111111111，0 }$&lt;&#x2F;p&gt;
&lt;p&gt;对于 $M=1000$ 的任意一瓶药水，在这个结果集中都有唯一一个值对应。&lt;&#x2F;p&gt;
&lt;p&gt;也就是说，出现任意一种结果，我们都能判断哪一瓶是毒药。&lt;&#x2F;p&gt;
&lt;p&gt;这个结果集好熟悉？&lt;&#x2F;p&gt;
&lt;p&gt;这不是就是数字的二进制表示？！&lt;&#x2F;p&gt;
&lt;h2 id=&quot;but-why&quot;&gt;BUT WHY？&lt;&#x2F;h2&gt;
&lt;p&gt;我们刚才用了归纳法（不太严格）解出了谜题，而且还发现跟二进制表示法有关联，充满好奇心的我们把问题推进的再深入一点，有没有更基础的理论能解释？&lt;&#x2F;p&gt;
&lt;p&gt;让我们再次思考问题，用更精确的语言描述：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;如何利用一群小白鼠的死或者生的所有可能结果唯一标识每一瓶水&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;我们需要一个等式，一个天平，不是用来称重量称生死，而是称可能性，称信息量。&lt;&#x2F;p&gt;
&lt;p&gt;这个可以度量信息的天平，就是香农定义的熵[2][]：&lt;&#x2F;p&gt;
&lt;p&gt;${\displaystyle H(X)=\mathbb {E} _{X}[I(x)]=\sum _{x\in {\mathcal {X}}}^{}p(x)\log _{2}({\frac {1}{p(x)}})}$&lt;&#x2F;p&gt;
&lt;p&gt;其中 ${\mathcal {X}}$ 为有限个事件 x 的集合，$X$ 是定义在 ${\mathcal {X}}$ 上的随机变量。信息熵 $H(X)$ 是对随机事件的度量。&lt;&#x2F;p&gt;
&lt;p&gt;刚才我们列举的试药的小白鼠们可能性的结果，就是随机变量$X$ 。所有的可能性结果集就是 ${\mathcal {X}}$  。&lt;&#x2F;p&gt;
&lt;p&gt;熵公式的 $log$  取了以2为底，实际上取 2，e ，10 或者其他值都可以，表明以哪一种进制衡量信息量，这里取2单位就是 bit。对就是那个大名鼎鼎的比特。&lt;&#x2F;p&gt;
&lt;p&gt;其实刚好合适，因为小白鼠只有生和死两种可能性。&lt;&#x2F;p&gt;
&lt;p&gt;1000瓶药水的毒药可能性是均等的，也就$p(x) = 1&#x2F;1000$   ，${\mathcal {X}}$ 有1000种可能性结果。&lt;&#x2F;p&gt;
&lt;p&gt;信息熵 &lt;code&gt;H(X)&lt;&#x2F;code&gt; 将给出要编码${\mathcal {X}}$ 集合中任意一个x 需要的最少位数， 可以计算得到：&lt;&#x2F;p&gt;
&lt;p&gt;$H(X) \approx 9.965784$ &lt;&#x2F;p&gt;
&lt;p&gt;取整数得到10。&lt;&#x2F;p&gt;
&lt;p&gt;到这里，我们总算为拯救无辜小白鼠的性命找到了坚实的理论依据。不再有无辜小白鼠被冒着生命危险试药。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-lun&quot;&gt;结论&lt;&#x2F;h2&gt;
&lt;p&gt;从上面这个思维实验我们得到什么？&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;转化是一种强大的思维武器&lt;&#x2F;strong&gt;。其实转化就是计算的本质，这是另外一个庞大的话题了。&lt;&#x2F;li&gt;
&lt;li&gt;信息熵使得定量分析研究信息的可能性成为现实。这个概念出自香农的研究生论文《A Mathematical Theory of Communication》几年后改名为《&lt;strong&gt;The&lt;&#x2F;strong&gt; Mathematical Theory of Communication》，你们仔细体会下一字之差背后的含义。&lt;&#x2F;li&gt;
&lt;li&gt;**不要成为小白鼠！**致人而不致于人，说起来容易做起来难呐。&lt;strong&gt;受制于游戏规则的时候，要懂点信息论&lt;&#x2F;strong&gt;，关键时刻能救命。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;[1][] http:&#x2F;&#x2F;news.17173.com&#x2F;content&#x2F;06122018&#x2F;172405879.shtml &lt;&#x2F;p&gt;
&lt;p&gt;[2][] https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E4%BF%A1%E6%81%AF%E8%AE%BA&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>REST 以及 RESTful 辨析</title>
                <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
                <link>https%3A//blog.zongwu233.com/what-exactly-is-rest-and-restful/</link>
                <guid>https%3A//blog.zongwu233.com/what-exactly-is-rest-and-restful/</guid>
                <description>&lt;p&gt;从&lt;code&gt;REST&lt;&#x2F;code&gt;概念提出到现在已经20年了，业界的主流实践采纳借鉴了其部分原则，但与其最核心的架构设计渐行渐远。&lt;&#x2F;p&gt;
&lt;p&gt;实际上那个去中心化的、面向全世界开放的万维网时代正在落幕，构建在其基础之上的&lt;code&gt;REST&lt;&#x2F;code&gt;架构思想，也无可避免地被冷落或者被误解。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>让我们聊一聊Rust的所有权系统</title>
                <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
                <link>https%3A//blog.zongwu233.com/talk-about-rust-ownership/</link>
                <guid>https%3A//blog.zongwu233.com/talk-about-rust-ownership/</guid>
                <description>&lt;p&gt;所有权（ownership）系统是 Rust 最与众不同的特性，让Rust实现了&lt;strong&gt;既要&lt;&#x2F;strong&gt;保障内存安全&lt;strong&gt;又要&lt;&#x2F;strong&gt;无GC，运行时高性能的目标。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>adsf-vm </title>
                <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
                <link>https%3A//blog.zongwu233.com/asdf-vm-intro/</link>
                <guid>https%3A//blog.zongwu233.com/asdf-vm-intro/</guid>
                <description>&lt;p&gt;官方给出的定义是：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Manage multiple runtime versions with a single CLI tool&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;大家在日常开发时，经常遇到需要对同一个编程语言&#x2F;框架安装不同版本的情况，比如 python 2&#x2F;3 ，ruby 1.8&#x2F;1.9，scala 2.11&#x2F;2.12&#x2F;... ，gradle 4.x&#x2F;5.x 等等。虽然已经有pyenv，rvm，sdkman 等等针对这些语言进行多版本的管理，方便不同版本的环境切换，但是：&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Git协议代理配置</title>
                <pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate>
                <link>https%3A//blog.zongwu233.com/git-proxy-config/</link>
                <guid>https%3A//blog.zongwu233.com/git-proxy-config/</guid>
                <description>&lt;p&gt;&lt;code&gt;Git&lt;&#x2F;code&gt;使用四种主要的协议来传输资料：本地协议（Local），HTTP 协议，SSH（Secure Shell）协议及 Git 协议。&lt;&#x2F;p&gt;
&lt;p&gt;为了能够顺畅使用&lt;code&gt;GitHub&lt;&#x2F;code&gt; ，我们需要为 &lt;code&gt;HTTPS&lt;&#x2F;code&gt; &lt;code&gt;SSH&lt;&#x2F;code&gt;配置代理。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>一致性模型</title>
                <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
                <link>https%3A//blog.zongwu233.com/consistency-models/</link>
                <guid>https%3A//blog.zongwu233.com/consistency-models/</guid>
                <description>&lt;h2 id=&quot;ji-ben-gai-nian&quot;&gt;基本概念&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;zheng-que-xing-correctness&quot;&gt;正确性（Correctness）&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;一个系统是由一个状态和一些转换该状态的操作组成的&lt;&#x2F;strong&gt;。当系统运行时，它通过一些操作记录从一个状态转换到另一个状态。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>OpenStack 管理</title>
                <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
                <link>https%3A//blog.zongwu233.com/openstack-management/</link>
                <guid>https%3A//blog.zongwu233.com/openstack-management/</guid>
                <description>&lt;h2 id=&quot;pei-zhi-wai-bu-wang-luo&quot;&gt;配置外部网络&lt;&#x2F;h2&gt;
&lt;p&gt;前提，本机双网卡，用于管理地址的 IP 地址为10.0.0.104，用于联网的 IP 地址为 192.168.1.100。&lt;&#x2F;p&gt;
&lt;p&gt;在后台管理界面进入 管理员 -&amp;gt; 网络 -&amp;gt; 网络&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;Ll4b3aZ7BNrUmwA.png&quot; alt=&quot;external_net_1.jpg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;选择 新建网络，名称填写 external ，项目选择 admin ，供应商网络类型 选择 Flat，物理网络填写 physnet1，勾选 共享的，外部网络。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;lG2QUuISFhC8NsO.png&quot; alt=&quot;external_net_2.jpg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对于物理网络名称，不能填错，具体名称可以通过以下步骤查看。&lt;&#x2F;p&gt;
&lt;p&gt;在本机执行以下命令进入 neutron docker 容器&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;docker exec -it neutron_server  bash

#查看
cat &#x2F;etc&#x2F;neutron&#x2F;plugins&#x2F;ml2&#x2F;ml2_conf.ini 

[ml2_type_flat]
flat_networks = physnet1
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;点击下一项，创建子网。子网填写本机器所在的真实网络配置，本机ip地址 192.168.1.100。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;iglDKoTBNtAXw43.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;子网名称 ext_subnet，网络地址 192.168.1.0&#x2F;24 网关IP 192.168.1.1&lt;&#x2F;p&gt;
&lt;p&gt;点击下一项，子网详情， 分配地址池， 填写192.168.1.160,192.168.1.200 这里预留40个ip。dns服务器 填写 223.5.5.5 。最后点创建。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pei-zhi-nei-bu-wang-luo&quot;&gt;配置内部网络&lt;&#x2F;h2&gt;
&lt;p&gt;在后台管理界面进入  项目 -&amp;gt; 网络 -&amp;gt; 网络&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;2UXtKvWJbyVqFL4.png&quot; alt=&quot;normal_net_1.jpg&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;TB9KnI7MdmCgbUD.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;选择创建网络 ，填写网络名称 normal，点下一项，填写子网名称，网络地址，这里填写 172.16.0.0&#x2F;24 网关填写 172.16.0.1 。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;WYFpgAfvJGLlkBK.png&quot; alt=&quot;&quot; &#x2F;&gt;点击下一项，填写子网详情，分配地址池 填写 172.16.0.100,127.16.0.200 。dns服务器填写 223.5.5.5 。最后点创建。&lt;&#x2F;p&gt;
&lt;p&gt;然后点击 项目 -&amp;gt; 网络 -&amp;gt; 路由&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;uzRmcjpNfBoC7ks.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;创建路由，填写路由名称， 选择刚才创建的外网 external， 点击创建。&lt;&#x2F;p&gt;
&lt;p&gt;进入 项目 -&amp;gt; 网络 -&amp;gt; 网络拓扑&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;vFNLkqJPpWwBSgV.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;选择图中的路由，点击添加接口，选择子网，就是刚才创建的 normal。&lt;&#x2F;p&gt;
&lt;p&gt;到此，网络创建完毕。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-quan-zu-pei-zhi&quot;&gt;安全组配置&lt;&#x2F;h2&gt;
&lt;p&gt;进入 项目 -&amp;gt; 网络 -&amp;gt; 安全组&lt;&#x2F;p&gt;
&lt;p&gt;点击管理规则，点击添加规则&lt;&#x2F;p&gt;
&lt;p&gt;分别添加 所有ICMP的入口方向和出口方向，TCP 22端口(用于SSH)的出口方向和入口方向，TCP 53端口(用于DNS)的出口方向和入口方向，UDP 53端口(用于DNS)的出口方向和入口方向。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;Rt6qQCcOgAHsEkM.png&quot; alt=&quot;安全组&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jing-xiang-guan-li&quot;&gt;镜像管理&lt;&#x2F;h2&gt;
&lt;p&gt;镜像下载，下载地址 http:&#x2F;&#x2F;cloud.centos.org&#x2F;centos&#x2F;7&#x2F;images&#x2F;?C=M;O=D 或者阿里云 https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;centos&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;这里选择其中一个，wget http:&#x2F;&#x2F;cloud.centos.org&#x2F;centos&#x2F;7&#x2F;images&#x2F;CentOS-7-x86_64-GenericCloud.qcow2c&lt;&#x2F;p&gt;
&lt;p&gt;在本机的控制台输入&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;. &#x2F;etc&#x2F;kolla&#x2F;admin-openrc.sh

#上传镜像到glance
openstack image create &amp;quot;CentOS7-image&amp;quot; \
  --file CentOS-7-x86_64-GenericCloud.qcow2c \
  --disk-format qcow2 --container-format bare \
  --public
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;创建虚拟机规格&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    openstack flavor create --id 1 --ram 512 --disk 1 --vcpus 1 m1.tiny 
    openstack flavor create --id 2 --ram 2048 --disk 20 --vcpus 1 m1.small
    openstack flavor create --id 3 --ram 4096 --disk 40 --vcpus 2 m1.medium
    openstack flavor create --id 4 --ram 8192 --disk 80 --vcpus 4 m1.large
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;chuang-jian-xu-ni-ji-shi-li&quot;&gt;创建虚拟机实例&lt;&#x2F;h2&gt;
&lt;p&gt;进入 项目 -&amp;gt; 计算 -&amp;gt; 实例&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;TVs8PBNpudxEAH3.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击创建实例，填写实例名称，镜像选择刚才创建的 CentOS7-image ，云主机类型选择 m1.medium ，网络选择normal，安全组默认是 default，不创建密钥对，在配置里面输入下面的shell&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#!&#x2F;bin&#x2F;sh
passwd root &amp;lt;&amp;lt;EOF
123456
123456
EOF
sed -i &amp;#39;s&#x2F;PasswordAuthentication no&#x2F;PasswordAuthentication yes&#x2F;g&amp;#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config
sed -i &amp;#39;s&#x2F;#PubkeyAuthentication yes&#x2F;PubkeyAuthentication yes&#x2F;g&amp;#39;  &#x2F;etc&#x2F;ssh&#x2F;sshd_config
service ssh restart
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;该脚本会修改虚拟机实例用户 root 的密码为123456&lt;&#x2F;p&gt;
&lt;p&gt;点击创建实例。&lt;&#x2F;p&gt;
&lt;p&gt;创建成功之后， 点击该实例名称，进入控制台界面，然后登陆即可。&lt;&#x2F;p&gt;
&lt;p&gt;此时实例可访问外网，但是在局域网环境 (10.0.0.x) 无法访问该实例。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fen-pei-fu-dong-ip&quot;&gt;分配浮动IP&lt;&#x2F;h2&gt;
&lt;p&gt;进入 项目 -&amp;gt; 网络 -&amp;gt; 浮动IP&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;08&#x2F;13&#x2F;FQfsDRxlM1X7b4n.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击分配IP给项目，点击分配IP，则生成一个IP地址，属于 192.168.1.0&#x2F;24 网段。然后对刚刚生成的IP点击关联，关联到刚刚创建的虚拟机实例上。&lt;&#x2F;p&gt;
&lt;p&gt;可以在局域网其他机器上通过SSH登陆该虚拟机实例。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>kolla-ansible 部署 all-in-one 模式 OpenStack stein版</title>
                <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
                <link>https%3A//blog.zongwu233.com/kolla-ansible-deploy-all-in-one-mode-openstack-stein-version/</link>
                <guid>https%3A//blog.zongwu233.com/kolla-ansible-deploy-all-in-one-mode-openstack-stein-version/</guid>
                <description>&lt;h2 id=&quot;qian-qi-zhun-bei&quot;&gt;前期准备&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ji-qi-pei-zhi&quot;&gt;机器配置&lt;&#x2F;h3&gt;
&lt;p&gt;20Core  50G Memory  3.6 T Storage&lt;&#x2F;p&gt;
&lt;p&gt;双网卡，enp3s0 局域网静态ip配置，网卡作为管理后台地址，enp4s0 不要配置静态ip，可使用dhcp模式分配ip，用于后续OpenStack的虚拟机上网网卡。&lt;&#x2F;p&gt;
&lt;p&gt;注意两个网卡不要处于同一网段，采用 enp4s0 所在的网关作为本机的默认网关。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xi-tong-huan-jing-pei-zhi&quot;&gt;系统环境配置&lt;&#x2F;h3&gt;
&lt;p&gt;系统为 centOS 7.8  python 2.7.5&lt;&#x2F;p&gt;
&lt;p&gt;关闭防火墙&#x2F;NetworkManager&#x2F;SElinux&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;systemctl stop NetworkManager firewalld

systemctl disable NetworkManager firewalld

sed -i &amp;quot;s&#x2F;SELINUX=enforcing&#x2F;SELINUX=disabled&#x2F;&amp;quot; &#x2F;etc&#x2F;selinux&#x2F;config

setenforce 0

&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;ying-pan-de-kuai-cun-chu-pei-zhi&quot;&gt;硬盘的块存储配置&lt;&#x2F;h3&gt;
&lt;p&gt;这台机器的硬盘主要挂载在 &#x2F;home 下&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;cd &#x2F;home
truncate -s 2000G disk.img
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;创建了一个大小为2T的文件。采用下面这种方式创建大文件的速度太慢：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;dd if=&#x2F;dev&#x2F;zero of=.&#x2F;disk.img count=4096 bs=512MB 
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;创建文件之后，将磁盘文件虚拟成块设备&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;losetup -f

losetup &#x2F;dev&#x2F;loop0 disk.img
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#将物理磁盘初始化为物理卷PV
pvcreate &#x2F;dev&#x2F;loop0
#创建卷组 cinder-volumes，将PV加入到VG中
vgcreate cinder-volumes &#x2F;dev&#x2F;loop0
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;（注意生产环境要单独配置真正的硬盘到VG，不要采用上述挂载方式，否则机器重启导致虚拟机文件找不到）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-zhuang&quot;&gt;安装&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;an-zhuang-docker&quot;&gt;安装 docker&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;curl -sSL https:&#x2F;&#x2F;get.docker.io | bash
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;配置共享&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;kolla.conf

[Service]
MountFlags=shared　　
ExecStart=
ExecStart=&#x2F;usr&#x2F;bin&#x2F;dockerd --log-opt max-file=5 --log-opt max-size=50m

&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;配置加速&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sudo mkdir -p &#x2F;etc&#x2F;docker
sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
{
  &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https:&#x2F;&#x2F;******.mirror.aliyuncs.com&amp;quot;]
}
EOF

sudo systemctl daemon-reload
sudo systemctl restart docker

&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;registry-mirrors&lt;&#x2F;code&gt; 地址可以在阿里云镜像管理自行申请。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-zhuang-qi-ta-yi-lai&quot;&gt;安装其他依赖&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;yum install git
yum install -y epel-release  
yum install -y python-pip 
mkdir .pip
# 更改pip软件包源
tee &#x2F;root&#x2F;.pip&#x2F;pip.conf &amp;lt;&amp;lt; &amp;#39;EOF&amp;#39;
[global]
index-url = https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple
EOF
pip install -U pip
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;an-zhuang-ansible&quot;&gt;安装ansible&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;pip install ansible
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;an-zhuang-kolla-ansible&quot;&gt;安装 kolla-ansible&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;这里要特别注意，不要按照官方文档说明，而是按照下面的操作，否则后面部署的时候，会出现各种错误导致部署失败&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;openstack&#x2F;kolla -b stable&#x2F;stein
git clone https:&#x2F;&#x2F;github.com&#x2F;openstack&#x2F;kolla-ansible -b stable&#x2F;stein
pip install -r kolla&#x2F;requirements.txt
pip install -r kolla-ansible&#x2F;requirements.txt
cd kolla-ansible &amp;amp;&amp;amp;  python setup.py install
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里是采用指定源码分支，安装 kolla-ansible。&lt;&#x2F;p&gt;
&lt;p&gt;当前目录是 kolla-ansible ，执行&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;mkdir &#x2F;etc&#x2F;kolla &amp;amp;&amp;amp; cp etc&#x2F;kolla&#x2F;* &#x2F;etc&#x2F;kolla
cp ansible&#x2F;inventory&#x2F;* ~
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;生成OpenStack各服务的密码文件&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;kolla-genpwd
#修改openstack管理后台的登陆密码
vim &#x2F;etc&#x2F;kolla&#x2F;passwords.yml
keystone_admin_password 123456
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;编辑 kolla的配置文件&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;vim &#x2F;etc&#x2F;kolla&#x2F;globals.yml
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
kolla_base_distro: &amp;quot;centos&amp;quot;

#官方建议采用 source 更稳定而不是binary
kolla_install_type: &amp;quot;source&amp;quot;
# 版本
openstack_release: &amp;quot;stein&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;# Kolla options

#这里的ip 是 network_interface 网卡的ip 如果不配置，导致数据库（高可用模式）无法正常启动
kolla_internal_vip_address: &amp;quot;10.0.0.104&amp;quot;

#单机模式，关闭高可用
enable_haproxy: &amp;quot;no&amp;quot;

# Neutron - Networking Options
network_interface: &amp;quot;enp3s0&amp;quot;
neutron_external_interface: &amp;quot;enp4s0&amp;quot;

# TLS options
kolla_enable_tls_internal: &amp;quot;no&amp;quot;
kolla_enable_tls_external: &amp;quot;no&amp;quot;

# 使用cinder存储
enable_cinder: &amp;quot;yes&amp;quot;
enable_glance: &amp;quot;yes&amp;quot;
enable_magnum: &amp;quot;yes&amp;quot;
enable_heat: &amp;quot;yes&amp;quot;

# 如果使用lvm，需先创建cinder-volumes的卷组，上面已经创建过
enable_cinder_backend_lvm: &amp;quot;yes&amp;quot;
# 默认是kvm ，但是实际部署发现不生效，系统自动采用了 qemu
nova_compute_virt_type: &amp;quot;kvm&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;配置修改完成，可以拉取所有镜像，当前工作目录是 &lt;code&gt;~&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#提前拉取依赖的镜像
kolla-ansible -i .&#x2F;all-in-one pull
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个过程会很久，看网络情况。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bu-shu&quot;&gt;部署&lt;&#x2F;h2&gt;
&lt;p&gt;执行openstack部署需要的引导服务、部署前检查&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;# 引导服务
kolla-ansible -i .&#x2F;all-in-one bootstrap-servers 
#安装前的检查
kolla-ansible -i .&#x2F;all-in-one prechecks
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;结果都ok，可以进行部署&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;kolla-ansible -i .&#x2F;all-in-one deploy
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这一步也会很久。部署完成之后，&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;kolla-ansible -i .&#x2F;all-in-one  post-deploy
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这一步会生成 &lt;code&gt;&#x2F;etc&#x2F;kolla&#x2F;admin-openrc.sh&lt;&#x2F;code&gt; 文件。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;cat &#x2F;etc&#x2F;kolla&#x2F;admin-openrc.sh　

export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_TENANT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=123456
export OS_AUTH_URL=http:&#x2F;&#x2F;10.0.0.104:35357&#x2F;v3
export OS_INTERFACE=internal
export OS_IDENTITY_API_VERSION=3
export OS_REGION_NAME=RegionOne
export OS_AUTH_PLUGIN=password
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;安装 openstackclient ，可以在控制台执行openstack命令&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;pip install python-openstackclient
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;guan-li&quot;&gt;管理&lt;&#x2F;h2&gt;
&lt;p&gt;在浏览器打开 http:&#x2F;&#x2F;10.0.0.104 输入 admin 账号密码即可进入。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust mio库源码情景分析</title>
                <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
                <link>https%3A//blog.zongwu233.com/rust-mio-source-scenario-analysis/</link>
                <guid>https%3A//blog.zongwu233.com/rust-mio-source-scenario-analysis/</guid>
                <description>&lt;p&gt;mio 是 Metal IO，Rust语言生态比较底层的I&#x2F;O库，官网的介绍：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mio is a lightweight I&#x2F;O library for Rust with a focus on adding as little overhead as possible over the OS abstractions.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;mio目前已经发布了v0.6.19版本，这次分析代码版本选择 &lt;code&gt;master&lt;&#x2F;code&gt;分支，&lt;code&gt;commit id  &lt;&#x2F;code&gt; &lt;code&gt;14f37f283576040c8763f45de6c2b2bbcb82436d&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们从官方自带的example进行源码跟踪分析。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>如何放大你的个人能力（一）</title>
                <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
                <link>https%3A//blog.zongwu233.com/enlarge-your-personal-ability-1/</link>
                <guid>https%3A//blog.zongwu233.com/enlarge-your-personal-ability-1/</guid>
                <description>&lt;!-- Math rendering --&gt;
&lt;script src=&#x27;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.5&#x2F;latest.js?config=TeX-MML-AM_CHTML&#x27; async&gt;&lt;&#x2F;script&gt;
&lt;script type=&quot;text&#x2F;x-mathjax-config&quot;&gt;
MathJax.Hub.Config({tex2jax: {inlineMath: [[&#x27;$&#x27;,&#x27;$&#x27;], [&#x27;\\(&#x27;,&#x27;\\)&#x27;]]}});
&lt;&#x2F;script&gt;
&lt;h2 id=&quot;wen-ti&quot;&gt;问题&lt;&#x2F;h2&gt;
&lt;p&gt;一个普通人如何具有强大的能力，做到某些他原本无法做到的事情呢？&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
